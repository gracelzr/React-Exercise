{"version":3,"sources":["logo.svg","eagle.jpg","App.js","reportWebVitals.js","index.js"],"names":["App","state","predictions","setPred","pred","setState","classifyImg","classifier","ml5","console","log","image","document","getElementById","predict","err","results","then","this","className","length","map","i","probability","Math","floor","Navbar","dark","color","NavbarBrand","href","src","dog","id","width","alt","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","element","React","createElement"],"mappings":"mPAAe,I,eCAA,G,MAAA,IAA0B,mC,QCgE1BA,E,4MAvDXC,MAAQ,CACJC,YAAa,I,EAEjBC,QAAU,SAACC,GACP,EAAKC,SAAS,CACVH,YAAaE,K,EAGrBE,YAAc,WACV,IAAMC,EAAaC,kBAAoB,aAEvC,WACIC,QAAQC,IAAI,oBAGhB,IAAMC,EAAQC,SAASC,eAAe,WAEtCN,EAAWO,QAAQH,EAAO,GAAG,SAAUI,EAAKC,GACxC,OAAOA,KACRC,MAAK,SAACD,GACL,EAAKb,QAAQa,O,kEAKjBE,KAAKZ,gB,+BAIL,IAAIJ,EAAe,qBAAKiB,UAAU,SAAf,eAWnB,OATID,KAAKjB,MAAMC,YAAYkB,OAAS,IAChClB,EAAcgB,KAAKjB,MAAMC,YAAYmB,KAAI,SAACjB,EAAMkB,GAAO,IAC7CH,EAA2Bf,EAA3Be,UAAWI,EAAgBnB,EAAhBmB,YAEjB,OADAA,EAAcC,KAAKC,MAAoB,IAAdF,GAAuB,IAAM,IAElD,oCAAoBD,EAAI,EAAxB,iBAAyCH,EAAzC,OAAwDI,EAAxD,MAAUD,EAAI,QAK1B,sBAAKH,UAAU,MAAf,UACI,cAACO,EAAA,EAAD,CAAQC,MAAI,EAACC,MAAM,UAAnB,SACI,qBAAKT,UAAU,YAAf,SACI,cAACU,EAAA,EAAD,CAAaC,KAAK,qBAAlB,+BAGR,qBAAKC,IAAKC,EAAKC,GAAG,UAAUC,MAAM,MAAMC,IAAI,KAC5C,wDACEjC,S,GAlDIkC,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnC,SAASC,eAAe,SAG1B,IAAMmC,EAAUC,IAAMC,cACrB,KACA,CAAC/B,UAAU,OACX,oCAED0B,IAASC,OAAOE,EAASpC,SAASC,eAAe,UAKjDwB,M","file":"static/js/main.a0ac8983.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","export default __webpack_public_path__ + \"static/media/eagle.2dc255d7.jpg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport './App.css';\nimport dog from \"./eagle.jpg\";\nimport * as ml5 from \"ml5\";\n\n/*function App() {*/\nclass App extends Component {\n    state = {\n        predictions: []\r\n    }\n    setPred = (pred) => {\n        this.setState({\r\n            predictions: pred\r\n        });\r\n    }\n    classifyImg = () => {\n        const classifier = ml5.imageClassifier('MobileNet', modelLoaded);\r\n\r\n        function modelLoaded() {\r\n            console.log('Model Loaded!');\r\n        }\r\n\r\n        const image = document.getElementById('dog-img');\r\n\r\n        classifier.predict(image, 5, function (err, results) {\r\n            return results;\r\n        }).then((results) => {\r\n            this.setPred(results)\r\n        })\r\n    }\n\n    componentDidMount(){\n        this.classifyImg();\r\n    }\n\n    render() {\n        let predictions = (<div className=\"loader\"> </div>);\n\n        if (this.state.predictions.length > 0) {\n            predictions = this.state.predictions.map((pred, i) => {\r\n                let { className, probability } = pred;\r\n                probability = Math.floor(probability * 10000) / 100 + \"%\";\r\n                return (\r\n                    <div key={i + \"\"}> {i + 1}. Prediction: {className} at {probability} </div>\r\n                )\r\n            })\r\n        }\n        return(\n        <div className=\"App\">\n            <Navbar dark color=\"primary\">\n                <div className=\"container\">\n                    <NavbarBrand href=\"https://ml5js.org/\"> ML5.js Home </NavbarBrand>\n                </div>\n            </Navbar>\n            <img src={dog} id=\"dog-img\" width=\"500\" alt=\"\" />\n            <div> Prediction Results: </div>\n            { predictions }\n        </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nconst element = React.createElement(\n\t'h1',\n\t{className:'img'},\n\t'Image Classification with ML5.js'\n);\nReactDOM.render(element, document.getElementById('title'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}