{"version":3,"sources":["logo.svg","dog.jpg","components/yolo.js","assets/person.jpg","shared/imgInfo.js","assets/kite.jpg","assets/giraffe.jpg","components/ImgClassification.js","App.js","reportWebVitals.js","index.js"],"names":["console","log","IMAGES","id","image","name","description","person","ImageClassification","props","setPred","pred","setState","predictions","classifyImg","pic","classifier","ml5","document","getElementById","predict","err","results","then","Card","CardImg","top","src","alt","CardBody","CardTitle","CardText","state","selectedImg","pictures","this","pics","map","className","onClick","width","tag","length","i","probability","Math","floor","Component","App","Navbar","dark","color","NavbarBrand","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","element","React","createElement"],"mappings":"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","file":"static/js/main.8da79206.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","export default __webpack_public_path__ + \"static/media/dog.8ff4b2e4.jpg\";","import * as ml5 from \"ml5\";\nimport dog from \"../dog.jpg\";\n\n/* Add implementation of object detection by using yolo model*/\n\nconsole.log(\"YOLO Model Ready!\");\n","export default __webpack_public_path__ + \"static/media/person.dcdc0e0f.jpg\";","import person from \"../assets/person.jpg\";\r\nimport kite from \"../assets/kite.jpg\";\r\nimport giraffe from \"../assets/giraffe.jpg\";\r\n\r\nexport const IMAGES = \r\n    [\r\n        {\r\n            id: 'kite-img',\r\n            image: kite,\r\n            name: '1. Kite',\r\n            description: 'Ocean, Kite and people',\r\n        },\r\n        {\r\n            id: 'person-img',\r\n            image: person,\r\n            name: '2. Person',\r\n            description: 'Person, a horse and a dog',\r\n        },\r\n        {\r\n            id: 'giraffe-img',\r\n            image: giraffe,\r\n            name: '3. Giraffe',\r\n            description: 'A giraffe and an zebra',\r\n        }\r\n    ]","export default __webpack_public_path__ + \"static/media/kite.597f89bf.jpg\";","export default __webpack_public_path__ + \"static/media/giraffe.671bebd0.jpg\";","import React, { Component } from 'react';\r\nimport {\r\n    Card, CardImg, CardImgOverlay, CardText, CardBody, CardTitle\r\n} from 'reactstrap';\r\nimport * as ml5 from \"ml5\";\r\n\r\n/* This program displays multiple images and their prediction results\r\n * Media is a container that can hold images and text */\r\n\r\nclass ImageClassification extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            predictions: [],\r\n            selectedImg: null\r\n        }\r\n    }\r\n\r\n    setPred = (pred) => {\r\n        this.setState({\r\n            predictions: pred\r\n        });\r\n    }\r\n\r\n\r\n    classifyImg = (pic) => {\r\n        const classifier = ml5.imageClassifier('MobileNet', modelLoaded);\r\n\r\n        function modelLoaded() {\r\n            console.log('Model Loaded!');\r\n        }\r\n        const image = document.getElementById(pic.id);\r\n        classifier.predict(image, 5, function (err, results) {\r\n            return results;\r\n        }).then((results) => {\r\n            this.setPred(results)\r\n            console.log(results);\r\n        })\r\n\r\n        if (pic != null) {\r\n            return (\r\n                <Card>\r\n                    <CardImg top src={pic.image} alt={pic.name} />\r\n                    <CardBody>\r\n                        <CardTitle>{pic.name}</CardTitle>\r\n                        <CardText>{pic.description}</CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            );\r\n        } else {\r\n            return (\r\n                <div></div>\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n/*    componentDidMount(pic) {\r\n        this.classifyImg(pic);\r\n    }\r\n*/\r\n\r\n    render() {\r\n        const pictures = this.props.pics.map((pic) => {\r\n            return (\r\n                <div className=\"col-12 col-md-5 m-1\">\r\n                    <Card key={pic.id} onClick={() => this.classifyImg(pic)}>\r\n                        <CardImg width=\"50%\" src={pic.image} alt={pic.name} id={ pic.id } />\r\n                        <CardTitle tag=\"h5\" >{pic.name}</CardTitle>\r\n                    </Card>\r\n                </div>\r\n            );    \r\n        });\r\n\r\n        let predictions = (<div className=\"loader\"> </div>);\r\n        if (this.state.predictions.length > 0) {\r\n            predictions = this.state.predictions.map((pred, i) => {\r\n                let { className, probability } = pred;\r\n                probability = Math.floor(probability * 10000) / 100 + \"%\";\r\n                return (\r\n                    <div>\r\n                        <div key={i + \"\"}> { i+1 }. Prediction: {className} at {probability}</div>\r\n                    </div>\r\n                );\r\n\r\n            });\r\n        }\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                {pictures}\r\n\r\n                <div> Prediction Results of Selected Image: </div>\r\n                <p>\r\n                    <br/>\r\n                    {predictions}\r\n                </p>\r\n            </div>\r\n\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageClassification;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport './App.css';\nimport './components/yolo.js';\nimport { IMAGES } from './shared/imgInfo';\nimport ImageClassification from './components/ImgClassification';\n\n\n/*function App() {*/\nclass App extends Component {\n    constructor(props) {\n        super(props);\r\n        this.state = {\r\n            pics: IMAGES\r\n        };\r\n    }\n\n    render() {\n        return(\n        <div className=\"App\">\n            <Navbar dark color=\"primary\">\n                <div className=\"container\">\n                    <NavbarBrand href=\"https://ml5js.org/\"> ML5.js Home </NavbarBrand>\n                </div>\n                </Navbar>\n                <ImageClassification pics={this.state.pics} />\n        </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n\t\t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nconst element = React.createElement(\n\t'h1',\n\t{className:'img'},\n\t'Image Classification with ML5.js'\n);\nReactDOM.render(element, document.getElementById('title'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}