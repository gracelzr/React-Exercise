{"version":3,"sources":["logo.svg","dog.jpg","components/yolo.js","App.js","reportWebVitals.js","assets/person.jpg","assets/kite.jpg","assets/giraffe.jpg","components/ImgClassification.js","index.js"],"names":["console","log","App","state","predictions","setPred","pred","setState","classifyImg","classifier","ml5","image","document","getElementById","predict","err","results","then","this","className","length","map","i","probability","Math","floor","Navbar","dark","color","NavbarBrand","href","src","dog","id","width","alt","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ImageClassification","props","concat","pics","kite","name","description","person","giraffe","pictures","pic","Media","tag","left","middle","object","body","heading","temp","list","ReactDOM","render","StrictMode","element","React","createElement"],"mappings":"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","file":"static/js/main.9b68ae92.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","export default __webpack_public_path__ + \"static/media/dog.8ff4b2e4.jpg\";","import * as ml5 from \"ml5\";\nimport dog from \"../dog.jpg\";\n\n/* Add implementation of object detection by using yolo model*/\n\nconsole.log(\"YOLO Model Ready!\");\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport { Navbar, NavbarBrand } from 'reactstrap';\nimport './App.css';\nimport './components/yolo.js'\nimport dog from \"./dog.jpg\";\nimport * as ml5 from \"ml5\";\n\n\n/*function App() {*/\nclass App extends Component {\n    state = {\n        predictions: []\r\n    }\n    setPred = (pred) => {\n        this.setState({\r\n            predictions: pred\r\n        });\r\n    }\n    classifyImg = () => {\n        const classifier = ml5.imageClassifier('MobileNet', modelLoaded);\r\n\r\n        function modelLoaded() {\r\n            console.log('Model Loaded!');\r\n        }\r\n\r\n        const image = document.getElementById('dog-img');\r\n\r\n        classifier.predict(image, 5, function (err, results) {\r\n            return results;\r\n        }).then((results) => {\r\n            this.setPred(results)\r\n        })\r\n    }\n\n    componentDidMount(){\n        this.classifyImg();\r\n    }\n\n    render() {\n        let predictions = (<div className=\"loader\"> </div>);\n\n        if (this.state.predictions.length > 0) {\n            predictions = this.state.predictions.map((pred, i) => {\r\n                let { className, probability } = pred;\r\n                probability = Math.floor(probability * 10000) / 100 + \"%\";\r\n                return (\r\n                    <div key={i + \"\"}> {i + 1}. Prediction: {className} at {probability} </div>\r\n                )\r\n            })\r\n        }\n        return(\n        <div className=\"App\">\n            <Navbar dark color=\"primary\">\n                <div className=\"container\">\n                    <NavbarBrand href=\"https://ml5js.org/\"> ML5.js Home </NavbarBrand>\n                </div>\n            </Navbar>\n            <img src={dog} id=\"dog-img\" width=\"400\" alt=\"\" />\n            <div> Prediction Results: </div>\n                <p> {predictions} </p>\n                \n        </div>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/person.dcdc0e0f.jpg\";","export default __webpack_public_path__ + \"static/media/kite.597f89bf.jpg\";","export default __webpack_public_path__ + \"static/media/giraffe.671bebd0.jpg\";","import React, { Component } from 'react';\r\nimport { Media } from 'reactstrap';\r\nimport person from \"../assets/person.jpg\";\r\nimport kite from \"../assets/kite.jpg\";\r\nimport giraffe from \"../assets/giraffe.jpg\";\r\nimport * as ml5 from \"ml5\";\r\n\r\n/* This program displays multiple images and their prediction results\r\n * Media is a container that can hold images and text */\r\n\r\nclass ImageClassification extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pics: [\r\n                {\r\n                    id: 'kite-img',\r\n                    image: kite,\r\n                    name: 'Kite',\r\n                    description: 'Ocean, Kite and people',\r\n                },\r\n                {\r\n                    id: 'person-img',\r\n                    image: person,\r\n                    name: 'Person',\r\n                    description: 'Person, a horse and a dog',\r\n                },\r\n                {\r\n                    id: 'giraffe-img',\r\n                    image: giraffe,\r\n                    name: 'Giraffe',\r\n                    description: 'A giraffe and an zebra',\r\n                }\r\n            ],\r\n            predictions: []\r\n        };\r\n    }\r\n\r\n    setPred = (pred) => {\r\n        this.setState({\r\n            predictions: this.state.predictions.concat(pred)\r\n            /*predictions: pred*/\r\n        });\r\n    }\r\n\r\n    classifyImg = () => {\r\n        const classifier = ml5.imageClassifier('MobileNet', modelLoaded);\r\n\r\n        function modelLoaded() {\r\n            console.log('Model Loaded!');\r\n        }\r\n\r\n        for (var i = 0; i < this.state.pics.length; i++) {\r\n            const image = document.getElementById(this.state.pics[i].id);\r\n            classifier.predict(image, 5, function (err, results) {\r\n                return results;\r\n            }).then((results) => {\r\n                this.setPred(results)\r\n                console.log(results);\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.classifyImg();\r\n    }\r\n\r\n    render() {\r\n        const pictures = this.state.pics.map((pic) => {\r\n            let predictions = (<div className=\"loader\"> </div>);\r\n            return (\r\n                <div key={pic.id} className=\"col-12 mt-5\">\r\n                        <Media tag=\"li\">\r\n                            <Media left middle>\r\n                                <Media object src={pic.image} alt={pic.name} id={ pic.id } width=\"500\" />\r\n                            </Media>\r\n                            <Media body className=\"ml-5\">\r\n                                <Media heading> {pic.name} </Media>\r\n                                <p> {pic.description} </p>\r\n                            </Media>\r\n                        </Media>\r\n                    \r\n                </div>\r\n            );    \r\n        });\r\n\r\n        let predictions = (<div className=\"loader\"> </div>);\r\n        if (this.state.predictions.length > 0) {\r\n            predictions = this.state.predictions.map((pred, i) => {\r\n                let { className, probability } = pred;\r\n                probability = Math.floor(probability * 10000) / 100 + \"%\";\r\n                var temp = i - Math.floor(i/5) * 5 + 1;\r\n                if (i == 0 || i == 5 || i == 10) {\r\n                    return (\r\n                        <div>\r\n                            <div>\r\n                                <p> <br /> </p>\r\n                                Image {Math.floor(i / 4) + 1}\r\n                            </div>\r\n                            <div key={i + \"\"}> {temp}. Prediction: {className} at {probability}</div>                            \r\n                        </div>\r\n\r\n                    )\r\n                }\r\n                else {\r\n                    return (\r\n                        <div key={i + \"\"}> {temp}. Prediction: {className} at {probability}\r\n                        </div>\r\n                    )\r\n                }\r\n            })\r\n        }\r\n\r\n        return (\r\n\r\n            <div className=\"row\">\r\n                <Media list>\r\n                    {pictures}\r\n                </Media>\r\n                <Media list>\r\n                    <Media tag=\"li\">\r\n                        <Media body className=\"ml-5\">\r\n                            <Media heading> Prediction Results: </Media>\r\n                            <p> {predictions} </p>\r\n                        </Media>\r\n                    </Media>\r\n                </Media>\r\n            </div>\r\n\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default ImageClassification;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ImageClassification from './components/ImgClassification';\n\nReactDOM.render(\n  <React.StrictMode>\n\t\t<App />\n\t\t<ImageClassification />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nconst element = React.createElement(\n\t'h1',\n\t{className:'img'},\n\t'Image Classification with ML5.js'\n);\nReactDOM.render(element, document.getElementById('title'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}